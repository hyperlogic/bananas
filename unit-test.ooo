;; -*- mode: Lisp; -*-

;; ; proper indenting for kernel forms in emacs lisp-mode
;; (progn
;;   (put '$lambda 'lisp-indent-function 'defun)
;;   (put '$vau 'lisp-indent-function 'defun)
;;   (put '$define! 'lisp-indent-function 'defun)
;;   (put '$seqeunce 'lisp-indent-function 0)
;;   (put '$if 'lisp-indent-function 2)
;;   (put '$let 'lisp-indent-function 1)
;;   (put '$letrec 'lisp-indent-function 1))

(print 'Welcome!)

;; prints expression if it doesn't evaluate to #t
($define! $assert
  ($vau (x) env
    ($if (not? (eval x env))
        (print 'Test x 'Failed!)
      #inert)))

;; inert?
($assert (inert? #inert))
($assert (not? (inert? #ignore)))
($assert (not? (inert? #f)))
($assert (not? (inert? ())))
($assert (not? (inert? 'foo)))
($assert (not? (inert? 0.0)))
($assert (not? (inert? '(1 2))))
($assert (not? (inert? (make-environment))))
($assert (not? (inert? $if)))
($assert (not? (inert? inert?)))

;; ignore?
($assert (not? (ignore? #inert)))
($assert (ignore? #ignore))
($assert (not? (ignore? #f)))
($assert (not? (ignore? ())))
($assert (not? (ignore? 'foo)))
($assert (not? (ignore? 0.0)))
($assert (not? (ignore? '(1 2))))
($assert (not? (ignore? (make-environment))))
($assert (not? (ignore? $if)))
($assert (not? (ignore? ignore?)))

;; boolean?
($assert (not? (boolean? #inert)))
($assert (not? (boolean? #ignore)))
($assert (boolean? #f))
($assert (not? (boolean? ())))
($assert (not? (boolean? 'foo)))
($assert (not? (boolean? 0.0)))
($assert (not? (boolean? '(1 2))))
($assert (not? (boolean? (make-environment))))
($assert (not? (boolean? $if)))
($assert (not? (boolean? boolean?)))

;; null?
($assert (not? (null? #inert)))
($assert (not? (null? #ignore)))
($assert (not? (null? #f)))
($assert (null? ()))
($assert (not? (null? 'foo)))
($assert (not? (null? 0.0)))
($assert (not? (null? '(1 2))))
($assert (not? (null? (make-environment))))
($assert (not? (null? $if)))
($assert (not? (null? null?)))

;; symbol?
($assert (not? (symbol? #inert)))
($assert (not? (symbol? #ignore)))
($assert (not? (symbol? #f)))
($assert (not? (symbol? ())))
($assert (symbol? 'foo))
($assert (not? (symbol? 0.0)))
($assert (not? (symbol? '(1 2))))
($assert (not? (symbol? (make-environment))))
($assert (not? (symbol? $if)))
($assert (not? (symbol? symbol?)))

;; number?
($assert (not? (number? #inert)))
($assert (not? (number? #ignore)))
($assert (not? (number? #f)))
($assert (not? (number? ())))
($assert (not? (number? 'foo)))
($assert (number? 0.0))
($assert (not? (number? '(1 2))))
($assert (not? (number? (make-environment))))
($assert (not? (number? $if)))
($assert (not? (number? number?)))

;; pair?
($assert (not? (pair? #inert)))
($assert (not? (pair? #ignore)))
($assert (not? (pair? #f)))
($assert (not? (pair? ())))
($assert (not? (pair? 'foo)))
($assert (not? (pair? 0.0)))
($assert (pair? '(1 2)))
($assert (not? (pair? (make-environment))))
($assert (not? (pair? $if)))
($assert (not? (pair? number?)))

;; environment?
($assert (not? (environment? #inert)))
($assert (not? (environment? #ignore)))
($assert (not? (environment? #f)))
($assert (not? (environment? ())))
($assert (not? (environment? 'foo)))
($assert (not? (environment? 0.0)))
($assert (not? (environment? '(1 2))))
($assert (environment? (make-environment)))
($assert (not? (environment? $if)))
($assert (not? (environment? number?)))

;; operative?
($assert (not? (operative? #inert)))
($assert (not? (operative? #ignore)))
($assert (not? (operative? #f)))
($assert (not? (operative? ())))
($assert (not? (operative? 'foo)))
($assert (not? (operative? 0.0)))
($assert (not? (operative? '(1 2))))
($assert (not? (operative? (make-environment))))
($assert (operative? $if))
($assert (not? (operative? number?)))

;; applicative?
($assert (not? (applicative? #inert)))
($assert (not? (applicative? #ignore)))
($assert (not? (applicative? #f)))
($assert (not? (applicative? ())))
($assert (not? (applicative? 'foo)))
($assert (not? (applicative? 0.0)))
($assert (not? (applicative? '(1 2))))
($assert (not? (applicative? (make-environment))))
($assert (not? (applicative? $if)))
($assert (applicative? number?))

;; $quote
($assert (eq? 10 ($quote 10)))
($assert (eq? #t ($quote #t)))

;; eq?
($assert (eq? #t #t))
($assert (eq? 10 10))
($assert (eq? eq? eq?))
($assert (eq? $if $if))
($assert (eq? () ()))
($assert (not? (eq? '(1) '(1))))

;; equal?
($assert (equal? #t #t))
($assert (equal? 10 10))
($assert (equal? eq? eq?))
($assert (equal? $if $if))
($assert (equal? () ()))
($assert (equal? '(1) '(1)))
($assert (equal? '(1 $if #t (key . value) ()) '(1 $if #t (key . value) ())))

;; eval
($assert (eq? 10 (eval 10)))
($assert (eq? 10 (eval '(+ 5 5))))
($assert (eq? #t (eval #t)))

;; $define!
($define! ten 10)
($define! plus +)
($define! true #t)
($assert (eq? 10 ten))
($assert (eq? + plus))
($assert (eq? true #t))

;; $if
($assert (eq? 10 ($if #t 10 11)))
($assert (eq? 11 ($if #f 10 11)))

;; cons
($assert (equal? '(1 2 3 . 4) (cons 1 (cons 2 (cons 3 4)))))

;; set-car!
($define! temp '(1 2 3 . 4))
(set-car! temp 4)
($assert (equal? temp '(4 2 3 . 4)))

;; set-cdr!
(set-cdr! temp 10)
($assert (equal? temp '(4 . 10)))

;; make-environment
($assert (environment? (make-environment)))

;; $vau
($define! $twin ($vau x #ignore (cons (car x) (car x))))
($assert (equal? ($twin 10) '(10 . 10)))
